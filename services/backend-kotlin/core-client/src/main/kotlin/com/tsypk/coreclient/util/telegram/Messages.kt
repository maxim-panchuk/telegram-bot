package com.tsypk.coreclient.util.telegram

import com.tsypk.coreclient.model.Supplier
import com.tsypk.coreclient.model.stat.Stat
import com.tsypk.coreclient.model.stuff.FullRecognitionResult
import com.tsypk.coreclient.model.subscription.Subscription
import com.tsypk.coreclient.service.presenting.apple.groupAirPodsByCountryString
import com.tsypk.coreclient.service.presenting.apple.groupIphoneByCountryString
import com.tsypk.coreclient.service.presenting.apple.groupMacbooksByCountryString
import com.tsypk.coreclient.service.presenting.apple.toHumanReadableString
import com.tsypk.coreclient.service.presenting.subscription.toHumanReadableString
import com.tsypk.coreclient.util.formatRu
import com.tsypk.coreclient.util.strOrBlank
import com.tsypk.coreclient.util.toSingleString
import recognitioncommons.models.apple.airpods.AirPods
import recognitioncommons.models.apple.airpods.AirPodsSearchModel
import recognitioncommons.models.apple.iphone.Iphone
import recognitioncommons.models.apple.iphone.IphoneSearchModel
import recognitioncommons.models.apple.macbook.Macbook
import recognitioncommons.util.toSearchModel

object Messages {
    object COMMON {
        val startCommand = """
            |–ü—Ä–∏–≤–µ—Ç! –í–≤–æ–¥–∏ /help —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –æ –±–æ—Ç–µ
        """.trimMargin()

        private val tryAgainOrSupport = """
            |–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî ${TelegramInfo.Support.username}
        """.trimMargin()

        fun composeUnexpectedException(e: Exception): String {
            return composeUnexpectedExceptionMsg(e.message ?: "")
        }

        fun composeUnexpectedExceptionMsg(msg: String): String {
            return """
                |–û–π-–æ–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                |
                |$tryAgainOrSupport
            """.trimMargin()
        }

        fun composeTelegramBotMovedMsg(handle: String): String {
            return """
                |–ü—Ä–∏–≤–µ—Ç! –ú—ã –ø–µ—Ä–µ–µ—Ö–∞–ª–∏, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —É—Ç–µ—Ä—è–Ω—ã!
                |–ü–µ—Ä–µ—Ö–æ–¥–∏ ‚Äî $handle
            """.trimMargin()
        }

        fun composeFullExceptionInfo(e: Exception, id: Long? = null): String {
            return """
                |from id=$id
                |stacktrace:
                |${e.stackTraceToString()}
            """.trimMargin()
        }

        fun composePagedByLimitMessages(
            toSend: List<String>,
            limit: Int = 4096,
            prefix: String = "",
        ): List<String> {
            val answer = mutableListOf<String>()
            var buffer = StringBuilder(prefix)
            for (el in toSend) {
                if ((el.length + buffer.length) >= limit) {
                    answer.add(buffer.toString())
                    buffer = StringBuilder()
                }
                buffer.append(el)
                buffer.append("\n")
            }
            if (buffer.isNotEmpty()) {
                answer.add(buffer.toString())
            }
            return answer
        }
    }

    object ADMIN {
        val helpCommand = """
            |/start ‚Äî –Ω–∞—á–∞—Ç—å
            |/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            |/stat - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            |/supplier_stat - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            |/suppliers ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            |/add_subscription ‚Äî –¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–Ω–∞ –±–æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)
            |/add_supplier ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            |/delete_supplier ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –≤–µ—Å—å –µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            |/add <nickname> ‚Äî –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            |/send_resellers ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –∏–º–µ–Ω–∏ ${TelegramInfo.ResellerBot.username} —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ telegram id
            |/send_suppliers ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –∏–º–µ–Ω–∏ ${TelegramInfo.SupplierBot.username} —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ telegram id
        """.trimMargin()

        const val onReload = "–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —á—Ç–æ —è –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –≤—Å—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–æ—Ç–µ –æ—á–∏—â–µ–Ω–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"

        const val plannedTruncation = "–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
        const val successTruncation = "–¢–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"

        const val plannedFirstSupplierReminder = "–û—Ç—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑"
        const val plannedSecondSupplierReminder = "–û—Ç—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑"

        fun plannedMailingException(e: Exception): String {
            return """
                |–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∏–Ω–≥–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
                |–î–µ—Ç–∞–ª–∏:
                |
                ${COMMON.composeFullExceptionInfo(e)}
            """.trimMargin()
        }
    }

    object SUPPLIER {
        val helpCommand = """
            |/start ‚Äî –Ω–∞—á–∞—Ç—å
            |/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            |
            |–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
            |–û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ ${TelegramInfo.ResellerBot.username}
            |–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–∑ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            |
            |–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ ${TelegramInfo.Channel.username}
        """.trimMargin()

        val requireItems = """
            |–û—Ç–ø—Ä–∞–≤—å –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            |–û—Ç–ø—Ä–∞–≤—å <b>send</b> —á—Ç–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            |–û—Ç–ø—Ä–∞–≤—å <b>cancel</b> —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
            |–ß—Ç–æ –±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫–æ–π‚Äî—Ç–æ –º—É—Å–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å send
        """.trimMargin()

        val onSupplierNotFound = """
            |–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_supplier
        """.trimMargin()

        val botIsNotPermitted = """
            |–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–æ—Ç –±–æ—Ç
            |–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞ ‚Äî ${TelegramInfo.Support.username}
        """.trimMargin()

        val supplierIsNotInDb = """
            |–ü–æ –∫–∞–∫–æ–π‚Äî–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã –Ω–µ –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            |–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á—Ç–æ –±—ã –ø–æ–ø–∞—Å—Ç—å —Ç—É–¥–∞ ‚Äî ${TelegramInfo.Support.username}
        """.trimMargin()

        val supplierStashDeleted = """
            |–í–∞—à–∞ –±–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
            |
            |–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ø–æ –ú–°–ö
        """.trimMargin()

        val supplierFirstReminder = """
            |–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ –≤–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üôå
            |–°–ª–µ–¥—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ 12:00 –ø–æ –ú–°–ö
        """.trimMargin()

        val supplierSecondReminder = """
            |–í—ã –≤—Å–µ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ –≤–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–µ –∂–¥—É—Ç üèÖ
        """.trimMargin()

        fun composeSuppliersListCommand(suppliers: Collection<Supplier>): String {
            val suppliersString = suppliers.joinToString(separator = "\n") {
                "|${it.username} ‚Äî ${it.title.strOrBlank()}"
            }
            return """
                |–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:
                $suppliersString
            """.trimMargin()
        }

        fun composeSupplierNotFound(username: String): String {
            return """
                |–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å –Ω–∏–∫–æ–º $username –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ —Å–ø–∏—Å–∫–µ
            """.trimMargin()
        }

        fun composePriceListRecognized(r: FullRecognitionResult): String {
            return """
                |${r.airPods.size} —ç–∏—Ä–ø–æ–¥—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                |${r.iphones.size} –∞–π—Ñ–æ–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                |${r.macbooks.size} –º–∞–∫–±—É–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                |${r.errors.size} —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
                |
                |–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
                |–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî ${TelegramInfo.Support.username}
            """.trimMargin()
        }
    }

    object RESELLER {
        val startCommand = """
            |<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É</b> –ì–æ—Ä–±—É—à–∫–∏!

            |–°–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è <b>–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º</b> –ø–æ –ø–æ–∏—Å–∫—É <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö</b> –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ <b>–æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>.

            |–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ <b>—Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b> –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é <b>¬´–æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤¬ª</b>.
            
            |–í–≤–æ–¥–∏ /help —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.
        """.trimMargin()

        val helpCommand = """
            |/start ‚Äî –ù–∞—á–∞—Ç—å
            |/help ‚Äî –ü–æ–º–æ—â—å
            |/support ‚Äî –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            |/subscription_info ‚Äî –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
            |/buy ‚Äî –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            |
            |–ß—Ç–æ –±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∫–æ–º–∞–Ω–¥
            |
            |–§–æ—Ä–º–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä—ã:
            |   Iphone:
            |       [*–ú–æ–¥–µ–ª—å] [–ü–∞–º—è—Ç—å] [–¶–≤–µ—Ç] [–°—Ç—Ä–∞–Ω–∞]
            |       14 Pro Max 128 Black üá∫üá∏
            |       14 –ú–∞–∫—Å 256 –ß—ë—Ä–Ω—ã–π –ö–∏—Ç–∞–π
            |   Airpods:
            |       [*–ú–æ–¥–µ–ª—å] [–¶–≤–µ—Ç] [–°—Ç—Ä–∞–Ω–∞]
            |       AirPods Max Gray
            |       –≠–∏—Ä–ø–æ–¥—Å 3
            |   Macbooks:
            |       [*–ú–æ–¥–µ–ª—å]   [*–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä][*–≠–∫—Ä–∞–Ω][–ü–∞–º—è—Ç—å SSD][–ü–∞–º—è—Ç—å RAM][–¶–≤–µ—Ç][–°—Ç—Ä–∞–Ω–∞]
            |       Macbook Pro  M1 Pro      16         512      16        Space Gray RUSSIA
            |       Macbook Air 13 M1
            |* –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        """.trimMargin()
    }

    object SUBSCRIPTION {
        const val subscriptionNotReadyYet = "–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã, –Ω–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —É–∂–µ –±—É–¥—É—Ç :)"
        const val noSubscription = "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        fun subscriptionExpired(subscription: Subscription): String {
            val expireDate = subscription.expireDate.formatRu()
            return """
                |–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ $expireDate, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é
            """.trimMargin()
        }

        fun subscriptionInfo(subscription: Subscription): String {
            val subscriptionDate = subscription.subscriptionDate.formatRu()
            val expireDate = subscription.expireDate.formatRu()
            val typeStr = toHumanReadableString(subscription.type)
            return """
                |–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ $typeStr!
                |–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: $subscriptionDate
                |–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: $expireDate
            """.trimMargin()
        }

        fun newSubscriptionAdmin(id: Long, subscription: Subscription): String {
            val expireDate = subscription.expireDate.formatRu()
            return """
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id $id –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ $subscription –¥–æ $expireDate
            """.trimIndent()
        }
    }

    object COMMAND {
        const val support = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî ${TelegramInfo.Support.username}"
    }

    object SEARCH {
        fun onEmptySearchResult(): String {
            return """
                |–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å
                |–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ${TelegramInfo.Support.username}
            """.trimMargin()
        }

        fun searchResultTemplate(
            header: String,
            staff: String,
        ): String {
            return """
                |<u><b>$header</b></u>
                $staff

                |ü§ñ ${TelegramInfo.ResellerBot.username}
            """.trimMargin()
        }

        fun mailingResultTemplate(
            header: String,
            staff: String,
        ): String {
            return """
                |<u><b>$header</b></u>
                $staff
            """.trimMargin()
        }

        fun searchResultModelTemplate(
            header: String,
            staff: String,
        ): String {
            return """
                |<u><b>$header</b></u>
                $staff

            """.trimMargin()
        }

        fun recognitionResultTemplate(payload: String, recognized: String): String {
            return """
                |–£–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å $recognized:
                |$payload
                |–ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã ü§ëü§ëü§ë
            """.trimMargin()
        }
    }

    object AIRPODS {
        fun composeRecognizedAirPodsTgLimit(airPods: List<AirPods>): List<String> {
            return COMMON.composePagedByLimitMessages(airPods.map { it.toHumanReadableString() })
        }

        fun airPodsBestPricesForSearchModel(
            airPods: List<AirPods>,
        ): String {
            if (airPods.isEmpty()) {
                return SEARCH.onEmptySearchResult()
            }
            return airPodsListResult(airPods)
        }

        fun airPodsBestPricesMailing(
            airPods: List<AirPods>,
        ): String {
            return airPodsListResult(airPods, SEARCH::mailingResultTemplate)
        }

        fun airPodsOneMessageResult(airPods: List<AirPods>): String {
            val airPodsGroupedByCountry = groupAirPodsByCountryString(airPods)
            val dynamicHeader = airPods.first().toSearchModel()
            return SEARCH.searchResultModelTemplate(
                header = dynamicHeader.toString(),
                staff = airPodsGroupedByCountry,
            )
        }

        private fun airPodsListResult(
            airPods: List<AirPods>,
            template: (header: String, staff: String) -> String = SEARCH::searchResultTemplate,
        ): String {
            val airPodsGroupedByCountry = groupAirPodsByCountryString(airPods)
            val dynamicHeader = airPods.first().toSearchModel()
            return template(dynamicHeader.toString(), airPodsGroupedByCountry)
        }

        fun composeAddAirPodsResponseMessage(addedAirPodsCnt: Int, errorLinesCnt: Int): String {
            return """
                |–í—Å–µ–≥–æ $addedAirPodsCnt —ç–∏—Ä–ø–æ–¥—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                |–í—Å–µ–≥–æ $errorLinesCnt —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ —ç–∏—Ä–ø–æ–¥—Å—ã
                |
                |–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —ç–∏—Ä–ø–æ–¥—Å—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
                |–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî ${TelegramInfo.Support.username}
            """.trimMargin()
        }

        fun airPodsRecognized(airPods: List<AirPodsSearchModel>): String {
            return SEARCH.recognitionResultTemplate(
                payload = airPods.map { it.toString() }.toSingleString("\n"),
                recognized = "—ç–∏—Ä–ø–æ–¥—Å—ã"
            )
        }
    }

    object IPHONE {
        fun composeRecognizedIphonesTgLimit(iphones: List<Iphone>): List<String> {
            return COMMON.composePagedByLimitMessages(iphones.map { it.toHumanReadableString() })
        }

        fun iphoneBestPricesForSearchModel(
            iphones: List<Iphone>,
        ): String {
            if (iphones.isEmpty()) {
                return SEARCH.onEmptySearchResult()
            }
            return iphonesListResult(iphones)
        }

        fun iphonesBestPricesMailing(
            iphones: List<Iphone>,
        ): String {
            return iphonesListResult(iphones, SEARCH::mailingResultTemplate)
        }

        fun iphonesOneMessageResult(iphones: List<Iphone>): String {
            val iphonesGroupedByCountry = groupIphoneByCountryString(iphones)
            val dynamicHeader = iphones.first().toSearchModel()
            return SEARCH.searchResultModelTemplate(
                header = dynamicHeader.toString(),
                staff = iphonesGroupedByCountry,
            )
        }

        private fun iphonesListResult(
            iphones: List<Iphone>,
            template: (header: String, staff: String) -> String = SEARCH::searchResultTemplate,
        ): String {
            val iphonesGroupedByCountry = groupIphoneByCountryString(iphones)
            val dynamicHeader = iphones.first().toSearchModel()
            return template(dynamicHeader.toString(), iphonesGroupedByCountry)
        }

        fun composeAddIphonesResponseMessage(addedIphonesCnt: Int, errorLinesCnt: Int): String {
            return """
                |–í—Å–µ–≥–æ $addedIphonesCnt –∞–π—Ñ–æ–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                |–í—Å–µ–≥–æ $errorLinesCnt —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –∞–π—Ñ–æ–Ω
                |
                |–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ –∞–π—Ñ–æ–Ω—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
                |–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî ${TelegramInfo.Support.username}
            """.trimMargin()
        }

        fun iphonesRecognized(iphones: List<IphoneSearchModel>): String {
            return SEARCH.recognitionResultTemplate(
                payload = iphones.map { it.toString() }.toSingleString("\n"),
                recognized = "–∞–π—Ñ–æ–Ω—ã"
            )
        }
    }

    object MACBOOK {
        fun macbooksBestPricesForSearchModel(
            macbooks: List<Macbook>,
        ): String {
            if (macbooks.isEmpty()) {
                return SEARCH.onEmptySearchResult()
            }
            return MACBOOK.macbookListResult(macbooks)
        }

        private fun macbookListResult(
            macbooks: List<Macbook>,
            template: (header: String, staff: String) -> String = SEARCH::searchResultTemplate,
        ): String {
            val macbooksGroupedByCountry = groupMacbooksByCountryString(macbooks)
            val dynamicHeader = macbooks.first().toSearchModel()
            return template(dynamicHeader.toString(), macbooksGroupedByCountry)
        }
    }

    object DIALOG {
        const val requireUsername = """
                –û—Ç–ø—Ä–∞–≤—å username –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: @postavshick
            """

        const val requireId = """
                –û—Ç–ø—Ä–∞–≤—å id –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 158343256 (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ @userinfobot)
            """

        const val requireTitle = """
                –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–µ), –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ—Å—Ç–∞–≤—â–∏–∫ –í–∞—Å—è
            """

        const val requireAccountType = """
                –û—Ç–ø—Ä–∞–≤—å —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:
                    1 ‚Äî –ö–∞–Ω–∞–ª
                    2 ‚Äî –ì—Ä—É–ø–ø–∞
                    3 ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            """

        const val requireTextToSendToResellers = """
                –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ ${TelegramInfo.ResellerBot.username}
            """

        const val requireTextToSendToSuppliers = """
                –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ ${TelegramInfo.SupplierBot.username}
            """

        fun composeSubscriptionForSupplierCreated(id: Long, username: String): String {
            return """
                    |–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å id=$id –∏ username=$username –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É ${TelegramInfo.SupplierBot.username}
                    |–ü–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ —É–±—Ä–∞—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é
                """.trimMargin()
        }

        fun composeSupplierCreateAction(
            username: String,
            id: Long,
            title: String,
        ): String {
            return """
                    |–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞? (y/n)
                    |       username ‚Äî $username
                    |       id ‚Äî $id
                    |       name ‚Äî $title
                """.trimMargin()
        }

        fun composeSupplierDeleteAction(
            username: String,
            id: Long,
            title: String,
        ): String {
            return """
                    |–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞? (y/n)
                    |       username ‚Äî $username
                    |       id ‚Äî $id
                    |       name ‚Äî $title
                    |       
                    |–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞.
                """.trimMargin()
        }

        fun composeSendToListedUsers(
            ids: List<Long>,
            text: String,
        ): String {
            return """
                    |–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: "$ids" 
                    |
                    |—Å–æ–æ–±—â–µ–Ω–∏–µ: "$text"?
                """.trimMargin()
        }

        fun composeSuccessfullySentToListedUsers(ids: List<Long>): String {
            return """
                |–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                |
                |ids = $ids
            """.trimMargin()
        }

        fun composeUnsuccessfullySentToListedUsers(ids: List<Long>): String {
            return """
                |–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ :(
                |–õ–∏–±–æ —á—Ç–æ-—Ç–æ —Å —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), –ª–∏–±–æ –æ–Ω–∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É (—á—Ç–æ –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ)
                |
                |ids = $ids
            """.trimMargin()
        }

        fun composeAddedOrNo(flag: Boolean): String {
            return if (flag) {
                "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ"
            } else {
                "–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚ùå"
            }
        }

        fun composeDeletedOrNo(flag: Boolean): String {
            return if (flag) {
                "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ"
            } else {
                "–ù–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ ‚ùå"
            }
        }
    }

    object STAT {
        private const val statEmpty = "–í–∏–¥–∏–º–æ —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞"

        fun composeStatMessage(stat: Stat?): String {
            if (stat == null) {
                return statEmpty
            }
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ <b>${stat.atDate.formatRu()}</b>:\n\n" + stat.statRegistry.toStringHtml()
        }

        fun composeSuppliersStat(usernames: Collection<String>): String {
            return "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏, –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:\n" + usernames.joinToString(separator = "\n") { it }
        }

        fun composeTotalMessagesStat(idsToUsername: Map<Long, String>, idsToMessages: Map<Long, Int>): String {
            return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" +
                    idsToUsername
                        .map { it.value to idsToMessages[it.key] }
                        .sortedByDescending { it.second }
                        .map { "${it.first} ‚Äì ${it.second}" }
                        .joinToString(separator = "\n") { it }
        }
    }
}
